{"ast":null,"code":"export class HeaderModel {\n  constructor() {}\n  async getHeader() {\n    return fetch('/api/header').then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async postHeader(header) {\n    return fetch('/api/header', {\n      method: 'POST',\n      body: JSON.stringify(header),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async putHeader(header) {\n    let newHeader = {\n      ...header,\n      \"id\": 1\n    };\n    console.log(newHeader);\n    return fetch('/api/header', {\n      method: 'PUT',\n      body: JSON.stringify(newHeader),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async save(header) {\n    try {\n      //if a header is returned, then call the put to update the header\n      await this.getHeader();\n      console.log('header exists');\n      let returnedHeader = await this.putHeader(header);\n      console.log(returnedHeader);\n    } catch (error) {\n      //if a header is not returned, then call the post to create the header\n      let returnedHeader = await this.postHeader(header);\n      console.log(returnedHeader);\n    }\n  }\n}","map":{"version":3,"names":["HeaderModel","constructor","getHeader","fetch","then","res","status","Error","json","postHeader","header","method","body","JSON","stringify","headers","putHeader","newHeader","console","log","save","returnedHeader","error"],"sources":["/Users/sonalsarin/Documents/CSUF Masters/Spring 2024/CPSC 597 Masters Project/Resume Builder UI/resume-builder-ui/src/model/header.js"],"sourcesContent":["export class HeaderModel {\n    constructor() {\n\n    }\n\n    async getHeader() {\n        return fetch('/api/header').then(res => {\n            if (res.status == 500) {\n                throw new Error();\n            }\n            else {\n                return res.json()\n            }\n        } \n           \n        ).then(res=> \n            res\n        )\n    }\n\n    async postHeader(header) {\n        return fetch('/api/header', {\n            method: 'POST',\n            body: JSON.stringify(header),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error();\n            }\n            else {\n                return res.json()\n            }\n        } \n           \n        ).then(res=> \n            res\n        )\n    }\n\n    async putHeader(header) {\n        let newHeader = {...header, \"id\": 1}\n        console.log(newHeader)\n        return fetch('/api/header', {\n            method: 'PUT',\n            body: JSON.stringify(newHeader),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        \n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error();\n            }\n            else {\n                return res.json()\n            }\n        } \n           \n        ).then(res=> \n            res\n        )\n    }\n\n    async save(header) {\n        try {\n            //if a header is returned, then call the put to update the header\n            await this.getHeader()\n            console.log('header exists')\n            let returnedHeader = await this.putHeader(header)\n            console.log(returnedHeader)\n\n        }\n        catch (error) {\n            //if a header is not returned, then call the post to create the header\n            let returnedHeader = await this.postHeader(header)\n            console.log(returnedHeader)\n        }\n    }\n}"],"mappings":"AAAA,OAAO,MAAMA,WAAW,CAAC;EACrBC,WAAWA,CAAA,EAAG,CAEd;EAEA,MAAMC,SAASA,CAAA,EAAG;IACd,OAAOC,KAAK,CAAC,aAAa,CAAC,CAACC,IAAI,CAACC,GAAG,IAAI;MACpC,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;QACnB,MAAM,IAAIC,KAAK,CAAC,CAAC;MACrB,CAAC,MACI;QACD,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;MACrB;IACJ,CAEA,CAAC,CAACJ,IAAI,CAACC,GAAG,IACNA,GACJ,CAAC;EACL;EAEA,MAAMI,UAAUA,CAACC,MAAM,EAAE;IACrB,OAAOP,KAAK,CAAC,aAAa,EAAE;MACxBQ,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,MAAM,CAAC;MAC5BK,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IACJ,CAAC,CAAC,CAACX,IAAI,CAACC,GAAG,IAAI;MACX,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;QACnB,MAAM,IAAIC,KAAK,CAAC,CAAC;MACrB,CAAC,MACI;QACD,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;MACrB;IACJ,CAEA,CAAC,CAACJ,IAAI,CAACC,GAAG,IACNA,GACJ,CAAC;EACL;EAEA,MAAMW,SAASA,CAACN,MAAM,EAAE;IACpB,IAAIO,SAAS,GAAG;MAAC,GAAGP,MAAM;MAAE,IAAI,EAAE;IAAC,CAAC;IACpCQ,OAAO,CAACC,GAAG,CAACF,SAAS,CAAC;IACtB,OAAOd,KAAK,CAAC,aAAa,EAAE;MACxBQ,MAAM,EAAE,KAAK;MACbC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACG,SAAS,CAAC;MAC/BF,OAAO,EAAE;QACL,cAAc,EAAE;MACpB;IAEJ,CAAC,CAAC,CAACX,IAAI,CAACC,GAAG,IAAI;MACX,IAAIA,GAAG,CAACC,MAAM,IAAI,GAAG,EAAE;QACnB,MAAM,IAAIC,KAAK,CAAC,CAAC;MACrB,CAAC,MACI;QACD,OAAOF,GAAG,CAACG,IAAI,CAAC,CAAC;MACrB;IACJ,CAEA,CAAC,CAACJ,IAAI,CAACC,GAAG,IACNA,GACJ,CAAC;EACL;EAEA,MAAMe,IAAIA,CAACV,MAAM,EAAE;IACf,IAAI;MACA;MACA,MAAM,IAAI,CAACR,SAAS,CAAC,CAAC;MACtBgB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;MAC5B,IAAIE,cAAc,GAAG,MAAM,IAAI,CAACL,SAAS,CAACN,MAAM,CAAC;MACjDQ,OAAO,CAACC,GAAG,CAACE,cAAc,CAAC;IAE/B,CAAC,CACD,OAAOC,KAAK,EAAE;MACV;MACA,IAAID,cAAc,GAAG,MAAM,IAAI,CAACZ,UAAU,CAACC,MAAM,CAAC;MAClDQ,OAAO,CAACC,GAAG,CAACE,cAAc,CAAC;IAC/B;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}