{"ast":null,"code":"export class WorkExperienceModel {\n  constructor() {}\n  async getWorkExperiences() {\n    return fetch('/api/workExperience').then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async postWorkExperience(workExperience) {\n    return fetch('/api/workExperience', {\n      method: 'POST',\n      body: JSON.stringify(workExperience),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async putWorkExperience(workExperience) {\n    return fetch('/api/workExperience', {\n      method: 'PUT',\n      body: JSON.stringify(workExperience),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async deleteWorkExperience(id) {\n    return fetch(`/api/workExperience/${id}`, {\n      method: 'DELETE'\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async saveWorkExperiences(workExperiences) {\n    console.log('inside save work experiences model');\n    //first, get educations\n    try {\n      let existingWorkExperiences = await this.getWorkExperiences();\n      let set = new Set();\n      existingWorkExperiences.forEach(element => {\n        set.add(element.id);\n      });\n      for (let i = 0; i < workExperiences.length; i++) {\n        //if education.id is null, then post\n        if (workExperiences[i].id == null) {\n          await this.postWorkExperience(workExperiences[i]);\n        } else {\n          if (set.has(workExperiences[i].id)) {\n            console.log(workExperiences[i].id);\n            console.log(workExperiences[i]);\n            await this.putWorkExperience(workExperiences[i]);\n            set.delete(workExperiences[i].id);\n          }\n        }\n      }\n      set.forEach(async id => {\n        await this.deleteWorkExperience(id);\n      });\n    } catch {\n      //if there are no education entries from the get, then post all the educations\n      for (let i = 0; i < workExperiences.length; i++) {\n        await this.postWorkExperience(workExperiences[i]);\n      }\n    }\n  }\n}","map":{"version":3,"names":["WorkExperienceModel","constructor","getWorkExperiences","fetch","then","res","status","Error","json","postWorkExperience","workExperience","method","body","JSON","stringify","headers","putWorkExperience","deleteWorkExperience","id","saveWorkExperiences","workExperiences","console","log","existingWorkExperiences","set","Set","forEach","element","add","i","length","has","delete"],"sources":["/Users/sonalsarin/Documents/CSUF Masters/Spring 2024/CPSC 597 Masters Project/Resume Builder UI/resume-builder-ui/src/model/workExperience.js"],"sourcesContent":["export class WorkExperienceModel {\n    constructor() {\n\n    }\n\n    async getWorkExperiences() {\n        return fetch('/api/workExperience').then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async postWorkExperience(workExperience) {\n        return fetch('/api/workExperience', {\n            method: 'POST',\n            body: JSON.stringify(workExperience),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async putWorkExperience(workExperience) {\n        return fetch('/api/workExperience', {\n            method: 'PUT',\n            body: JSON.stringify(workExperience),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async deleteWorkExperience(id) {\n        return fetch(`/api/workExperience/${id}`, {\n            method: 'DELETE',\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n\n    async saveWorkExperiences(workExperiences) {\n        console.log('inside save work experiences model')\n        //first, get educations\n        try {\n            let existingWorkExperiences = await this.getWorkExperiences()\n\n            let set = new Set()\n            existingWorkExperiences.forEach(element => {\n                set.add(element.id)\n            });\n\n    \n            for(let i = 0; i < workExperiences.length; i++) {\n                //if education.id is null, then post\n                if (workExperiences[i].id == null) {\n                    await this.postWorkExperience(workExperiences[i])\n                }\n                else {\n                    if(set.has(workExperiences[i].id)) {\n                        console.log(workExperiences[i].id)\n                        console.log(workExperiences[i])\n                        await this.putWorkExperience(workExperiences[i])\n    \n                        set.delete(workExperiences[i].id)\n                    }\n                }\n            }\n\n            set.forEach(async(id) => {\n                await this.deleteWorkExperience(id)\n            })          \n        }\n        catch {\n            //if there are no education entries from the get, then post all the educations\n            for(let i = 0; i < workExperiences.length; i++) {\n                await this.postWorkExperience(workExperiences[i])\n            }\n        }\n\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}