{"ast":null,"code":"export class EducationModel {\n  constructor() {}\n  async getEducation() {\n    return fetch('/api/education').then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async postEducation(education) {\n    return fetch('/api/education', {\n      method: 'POST',\n      body: JSON.stringify(education),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async putEducation(education) {\n    return fetch('/api/education', {\n      method: 'PUT',\n      body: JSON.stringify(education),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async deleteEducation(id) {\n    return fetch(`/api/education/${id}`, {\n      method: 'DELETE'\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async saveEducations(educations) {\n    console.log('inside save educations model');\n    //first, get educations\n    try {\n      let existingEducations = await this.getEducation();\n      let set = new Set();\n      existingEducations.forEach(element => {\n        set.add(element.id);\n      });\n      console.log(set);\n      educations.forEach(async education => {\n        //Check if incoming education id is in the set of educations, then make a put request to update, and remove id from set\n        if (set.has(education.id)) {\n          await this.putEducation(education);\n          set.delete(education.id);\n        } else {\n          console.log('education');\n          await this.postEducation(education);\n          console.log('inside post education');\n        }\n\n        //if incoming education id is not in the set of educations, then make a post request, and remove id from set\n        set.forEach(async id => {\n          await this.deleteEducation(id);\n        });\n      });\n\n      //any remaining ids in the set will become delete requests\n    } catch {}\n  }\n}","map":{"version":3,"names":["EducationModel","constructor","getEducation","fetch","then","res","status","Error","json","postEducation","education","method","body","JSON","stringify","headers","putEducation","deleteEducation","id","saveEducations","educations","console","log","existingEducations","set","Set","forEach","element","add","has","delete"],"sources":["/Users/sonalsarin/Documents/CSUF Masters/Spring 2024/CPSC 597 Masters Project/Resume Builder UI/resume-builder-ui/src/model/education.js"],"sourcesContent":["export class EducationModel {\n    constructor() {\n\n    }\n\n    async getEducation() {\n        return fetch('/api/education').then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async postEducation(education) {\n        return fetch('/api/education', {\n            method: 'POST',\n            body: JSON.stringify(education),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async putEducation(education) {\n        return fetch('/api/education', {\n            method: 'PUT',\n            body: JSON.stringify(education),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async deleteEducation(id) {\n        return fetch(`/api/education/${id}`, {\n            method: 'DELETE',\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async saveEducations(educations) {\n        console.log('inside save educations model')\n        //first, get educations\n        try {\n            let existingEducations = await this.getEducation()\n\n            let set = new Set()\n            existingEducations.forEach(element => {\n                set.add(element.id)\n            });\n\n            console.log(set)\n            educations.forEach(async(education) => {\n                //Check if incoming education id is in the set of educations, then make a put request to update, and remove id from set\n                if(set.has(education.id)) {\n\n                    await this.putEducation(education)\n\n                    set.delete(education.id)\n                }\n                else {\n                    console.log('education')\n                    await this.postEducation(education)\n                    console.log('inside post education')\n                }\n\n                //if incoming education id is not in the set of educations, then make a post request, and remove id from set\n                set.forEach(async(id) => {\n                    await this.deleteEducation(id)\n                })\n\n            })\n\n            \n            //any remaining ids in the set will become delete requests\n\n          \n        }\n        catch {\n\n        }\n\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}