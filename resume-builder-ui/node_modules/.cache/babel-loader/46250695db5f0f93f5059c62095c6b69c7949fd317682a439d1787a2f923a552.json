{"ast":null,"code":"export default class PersonalProjectsModel {\n  constructor() {}\n  async getPersonalProjects() {\n    return fetch('/api/personalProjects').then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async postPersonalProjects(personalProject) {\n    return fetch('/api/personalProjects', {\n      method: 'POST',\n      body: JSON.stringify(personalProject),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      } else {\n        return res.json();\n      }\n    }).then(res => res);\n  }\n  async putPersonalProjects(personalProject) {\n    return fetch('/api/personalProjects', {\n      method: 'PUT',\n      body: JSON.stringify(personalProject),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      }\n    }).then(res => res);\n  }\n  async deletePersonalProjects(id) {\n    return fetch(`/api/personalProjects/${id}`, {\n      method: 'DELETE'\n    }).then(res => {\n      if (res.status == 500) {\n        throw new Error();\n      }\n    }).then(res => res);\n  }\n  async savePersonalProjects(personalProjects) {\n    console.log('inside save personal projects model');\n    try {\n      let existingPersonalProjects = await this.getPersonalProjects();\n      let set = new Set();\n      existingPersonalProjects.forEach(element => {\n        set.add(element.id);\n      });\n      for (let i = 0; i < personalProjects.length; i++) {\n        if (!set.has(personalProjects[i].id)) {\n          await this.postPersonalProjects(personalProjects[i]);\n        } else {\n          if (set.has(personalProjects[i].id)) {\n            console.log(personalProjects[i].id);\n            console.log(personalProjects[i]);\n            await this.putPersonalProjects(personalProjects[i]);\n            set.delete(personalProjects[i].id);\n          }\n        }\n      }\n      let deletePromises = [];\n      set.forEach(async id => {\n        deletePromises.push(this.deletePersonalProjects(id));\n      });\n      await Promise.all(deletePromises);\n    } catch {\n      for (let i = 0; i < personalProjects.length; i++) {\n        await this.postPersonalProjects(personalProjects[i]);\n      }\n    }\n  }\n}","map":{"version":3,"names":["PersonalProjectsModel","constructor","getPersonalProjects","fetch","then","res","status","Error","json","postPersonalProjects","personalProject","method","body","JSON","stringify","headers","putPersonalProjects","deletePersonalProjects","id","savePersonalProjects","personalProjects","console","log","existingPersonalProjects","set","Set","forEach","element","add","i","length","has","delete","deletePromises","push","Promise","all"],"sources":["/Users/sonalsarin/Documents/CSUF Masters/Spring 2024/CPSC 597 Masters Project/Resume Builder App/resume-builder-ui/src/model/personalProjects.js"],"sourcesContent":["export default class PersonalProjectsModel {\n    constructor() {\n\n    }\n\n    async getPersonalProjects() {\n        return fetch('/api/personalProjects').then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async postPersonalProjects(personalProject) {\n        return fetch('/api/personalProjects', {\n            method: 'POST',\n            body: JSON.stringify(personalProject),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n            else {\n                return res.json()\n            }\n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async putPersonalProjects(personalProject) {\n        return fetch('/api/personalProjects', {\n            method: 'PUT',\n            body: JSON.stringify(personalProject),\n            headers: {\n                'Content-Type': 'application/json'\n            },\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n         \n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async deletePersonalProjects(id) {\n        return fetch(`/api/personalProjects/${id}`, {\n            method: 'DELETE',\n        }).then(res => {\n            if (res.status == 500) {\n                throw new Error;\n            }\n           \n        }\n        ).then(res=> \n            res\n        )\n    }\n\n    async savePersonalProjects(personalProjects) {\n        console.log('inside save personal projects model')\n        try {\n            let existingPersonalProjects = await this.getPersonalProjects()\n\n            let set = new Set()\n            existingPersonalProjects.forEach(element => {\n                set.add(element.id)\n            });\n\n    \n            for(let i = 0; i < personalProjects.length; i++) {\n                if(!set.has(personalProjects[i].id)) {\n                    await this.postPersonalProjects(personalProjects[i])\n                }\n                else {\n                    if(set.has(personalProjects[i].id)) {\n                        console.log(personalProjects[i].id)\n                        console.log(personalProjects[i])\n                        await this.putPersonalProjects(personalProjects[i])\n    \n                        set.delete(personalProjects[i].id)\n                    }\n                }\n            }\n\n            let deletePromises = []\n            set.forEach(async(id) => {\n                deletePromises.push(this.deletePersonalProjects(id))\n            })          \n\n            await Promise.all(deletePromises)\n        }\n        catch {\n            for(let i = 0; i < personalProjects.length; i++) {\n                await this.postPersonalProjects(personalProjects[i])\n            }\n        }\n\n\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}